        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:
        -:    7:/*
        -:    8:*Testing Adventurer Card
        -:    9:*	Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards into your hand and discard the other revealed cards.
        -:   10:*/
        -:   11:
function assertTest called 8 returned 100% blocks executed 100%
        8:   12:void assertTest(int passedTest)
        -:   13:{
        8:   14:	if (passedTest)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:   15:	{
        6:   16:		printf("PASSED: ");
call    0 returned 100%
        -:   17:	}
        -:   18:	else
        -:   19:	{
        2:   20:		printf("FAILED: ");
call    0 returned 100%
        -:   21:	}
        -:   22:
        8:   23:}
        -:   24:
function main called 2 returned 100% blocks executed 100%
        2:   25:int main() {
        2:   26:	int newCards = 0;
        2:   27:	int discarded = 1;
        2:   28:	int shuffledCards = 0;
        -:   29:	int handCount;
        -:   30:	int deckcount;
        -:   31:	int newDeckCount;
        2:   32:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        2:   33:	int seed = 1000;
        2:   34:	int numPlayers = 2;
        2:   35:	int thisPlayer = 0;
        -:   36:	struct gameState originalState, testState;
        2:   37:	int k[10] = { adventurer, embargo, village, minion, mine, cutpurse,
        -:   38:		sea_hag, tribute, smithy, council_room };
        -:   39:
        -:   40:	// initialize a game state and player cards
        2:   41:	initializeGame(numPlayers, k, seed, &originalState);
call    0 returned 100%
        2:   42:	printf("\nTESTING: Adventurer Card\n");
call    0 returned 100%
        -:   43:
        -:   44:	//copy game state
        2:   45:	printf("--------------------Test Case Copper, Copper, Gold ------------");
call    0 returned 100%
        2:   46:	memcpy(&testState, &originalState, sizeof(struct gameState));
        -:   47:
        2:   48:	deckcount = testState.deckCount[thisPlayer];
        -:   49:
        -:   50:
        2:   51:	int newDeck1[] = {copper, copper, copper};
        2:   52:	newDeckCount = 3;
        -:   53:
        8:   54:	for (int i = 0; i < newDeckCount; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        6:   55:		testState.deck[thisPlayer][--deckcount] = newDeck1[i];
        -:   56:	}
        -:   57:
        2:   58:	cardEffect(adventurer, choice1, choice2, choice3, &testState, handpos, &bonus);
call    0 returned 100%
        2:   59:	newCards = 2;
        2:   60:	handCount = testState.handCount[thisPlayer];
        -:   61:
        -:   62:	/****************************************Test 1****************************************/
        2:   63:	assertTest(testState.handCount[thisPlayer] == originalState.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        2:   64:	printf("Expected to increase handcount by two cards\n");
call    0 returned 100%
        -:   65:
        -:   66:	/****************************************Test 2****************************************/
        2:   67:	assertTest(testState.hand[thisPlayer][--handCount] == copper);
call    0 returned 100%
        2:   68:	printf("Expected to recieve the first treasure card, which is Copper\n");
call    0 returned 100%
        -:   69:
        -:   70:	/****************************************Test 3****************************************/
        2:   71:	assertTest(testState.hand[thisPlayer][--handCount] == copper);
call    0 returned 100%
        2:   72:	printf("Expected to recieve the second treasure card, which is Copper\n");
call    0 returned 100%
        -:   73:
        -:   74:	/****************************************Test 4****************************************/
        2:   75:	assertTest(testState.deckCount[thisPlayer] == originalState.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        2:   76:	printf("Expected to reduce the deck by two cards\n");
call    0 returned 100%
        -:   77:
        2:   78:	return 0;
        -:   79:}
