        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/*
        -:    9:*Testing Smithy Card
        -:   10:*	handsize is increased by drawing three cards
        -:   11:*/
        -:   12:
function assertTest called 6 returned 100% blocks executed 75%
        6:   13:void assertTest(int passedTest)
        -:   14:{
        6:   15:	if (passedTest)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   16:	{
        6:   17:		printf("PASSED: ");
call    0 returned 100%
        -:   18:	}
        -:   19:	else
        -:   20:	{
    #####:   21:		printf("FAILED: ");
call    0 never executed
        -:   22:	}
        -:   23:
        6:   24:}
        -:   25:
function main called 2 returned 100% blocks executed 100%
        2:   26:int main() {
        2:   27:	int newCards = 0;
        2:   28:	int discarded = 1;
        2:   29:	int shuffledCards = 0;
        2:   30:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        2:   31:	int seed = 10;
        2:   32:	int numPlayers = 2;
        2:   33:	int currentPlayer = 0;
        -:   34:	struct gameState originalState, testState;
        2:   35:	int k[10] = { adventurer, embargo, village, minion, mine, cutpurse,
        -:   36:		sea_hag, tribute, smithy, council_room };
        -:   37:
        -:   38:	// initialize a game state
        2:   39:	initializeGame(numPlayers, k, seed, &originalState);
call    0 returned 100%
        -:   40:
        2:   41:	printf("\nTESTING: Smithy Card\n");
call    0 returned 100%
        -:   42:
        -:   43:	//copy game state
        2:   44:	memcpy(&testState, &originalState, sizeof(struct gameState));
        -:   45:
        2:   46:	cardEffect(smithy, choice1, choice2, choice3, &testState, handpos, &bonus);
call    0 returned 100%
        2:   47:	newCards = 3;
        -:   48:
        -:   49:	/****************************************Test 1****************************************/
        2:   50:	assertTest(testState.handCount[currentPlayer] == originalState.handCount[currentPlayer] + newCards - discarded);
call    0 returned 100%
        2:   51:	printf("Expected to increase handcount and gain three cards");
call    0 returned 100%
        -:   52:	/****************************************Test 2****************************************/
        2:   53:	assertTest(testState.deckCount[currentPlayer] == originalState.deckCount[currentPlayer] - newCards + shuffledCards);
call    0 returned 100%
        2:   54:	printf("Expted to increase players deck count by three cards");
call    0 returned 100%
        -:   55:	/****************************************Test 3****************************************/
        2:   56:	assertTest(testState.playedCardCount == originalState.playedCardCount + discarded);
call    0 returned 100%
        2:   57:	printf("Expected to increase number of cards in discarded deck");
call    0 returned 100%
        -:   58:
        2:   59:	return 0;
        -:   60:}
