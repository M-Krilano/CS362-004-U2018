        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:
        -:    7:/*
        -:    8:*Testing Village Card
        -:    9:*	receive one card and one action
        -:   10:*/
        -:   11:
function assertTest called 10 returned 100% blocks executed 100%
       10:   12:void assertTest(int passedTest)
        -:   13:{
       10:   14:	if (passedTest)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -:   15:	{
        6:   16:		printf("PASSED: ");
call    0 returned 100%
        -:   17:	}
        -:   18:	else
        -:   19:	{
        4:   20:		printf("FAILED: ");
call    0 returned 100%
        -:   21:	}
        -:   22:
       10:   23:}
        -:   24:
function main called 2 returned 100% blocks executed 100%
        2:   25:int main() {
        2:   26:	int newCards = 0;
        2:   27:	int discarded = 1;
        2:   28:	int shuffledCards = 0;
        2:   29:	int numActions = 0;
        -:   30:
        2:   31:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        2:   32:	int seed = 1000;
        2:   33:	int numPlayers = 2;
        2:   34:	int thisPlayer = 0;
        -:   35:	struct gameState originalState, testState;
        2:   36:	int k[10] = { adventurer, embargo, village, minion, mine, cutpurse,
        -:   37:		sea_hag, tribute, smithy, council_room };
        -:   38:
        -:   39:	// initialize a game state and player cards
        2:   40:	initializeGame(numPlayers, k, seed, &originalState);
call    0 returned 100%
        -:   41:
        2:   42:	printf("\nTESTING: Village Card\n");
call    0 returned 100%
        -:   43:
        -:   44:	//copy game state
        2:   45:	memcpy(&testState, &originalState, sizeof(struct gameState));
        -:   46:
        2:   47:	cardEffect(village, choice1, choice2, choice3, &testState, handpos, &bonus);
call    0 returned 100%
        2:   48:	newCards = 1;
        2:   49:	numActions = 1;
        -:   50:
        -:   51:	/****************************************Test 1****************************************/
        2:   52:	assertTest(testState.handCount[thisPlayer] == originalState.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        2:   53:	printf("Expected to increase hand count by 1 card\n");
call    0 returned 100%
        -:   54:	/****************************************Test 1****************************************/
        2:   55:	assertTest(testState.deckCount[thisPlayer] == originalState.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        2:   56:	printf("Expected to decrease deck count by one card\n");
call    0 returned 100%
        -:   57:	/****************************************Test 1****************************************/
        2:   58:	assertTest(testState.whoseTurn == originalState.whoseTurn);
call    0 returned 100%
        2:   59:	printf("Expected to be same player's turn\n");
call    0 returned 100%
        -:   60:	/****************************************Test 1****************************************/
        2:   61:	assertTest(testState.numActions == originalState.numActions + numActions);
call    0 returned 100%
        2:   62:	printf("Expected to increase number of actions by one\n");
call    0 returned 100%
        -:   63:
        -:   64:	/****************************************Test 1****************************************/
        2:   65:	assertTest(testState.playedCardCount == originalState.playedCardCount + discarded);
call    0 returned 100%
        2:   66:	printf("Expected to increase number of discarded cards by one\n");
call    0 returned 100%
        -:   67:	/****************************************Test 1****************************************/
        -:   68:
        2:   69:	return 0;
        -:   70:}
