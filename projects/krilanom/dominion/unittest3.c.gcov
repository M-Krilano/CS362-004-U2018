        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:
        -:    6:/*
        -:    7:*Testing updateCoins()
        -:    8:*	updates the amount of coins based off the amount of treasure cards in players hand
        -:    9:*/
        -:   10:
function main called 3 returned 100% blocks executed 86%
        3:   11:int main() {
        -:   12:	struct gameState testState;
        3:   13:	int maxHand = 5;			// maximum cards per hand is 5
        3:   14:	int numPlayers = 2;
        3:   15:	int currentPlayer = 0; // player1 = 0 and player2 = 1
        3:   16:	int seed = 10;
        3:   17:	int bonus = 0;
        3:   18:	int k[] = { sea_hag, feast, embargo, village, minion, great_hall, steward,
        -:   19:		adventurer, council_room, smithy };
        -:   20:	
        -:   21:	int actual;
        -:   22:	int expected, expected1, expected2, expected3, expected4;
        -:   23:
        -:   24:	// initialize game with 2 players and a randomSeed of 10
        3:   25:	initializeGame(numPlayers, k, seed, &testState);
call    0 returned 100%
        -:   26:
        3:   27:	printf("TESTING: updateCoins()\n");
call    0 returned 100%
        -:   28:	/****************************************Test 1****************************************/
        3:   29:	printf("-TEST 1-\n");
call    0 returned 100%
        -:   30:
        -:   31:	// start out with 10 cards (3 estates and 7 coppers) but only 5 cards per had
        3:   32:	expected1 = 2, expected2 = 3, expected3 = 4, expected4 = 5;
        3:   33:	updateCoins(currentPlayer, &testState, bonus);
call    0 returned 100%
        3:   34:	actual = testState.coins;
        -:   35:	
        3:   36:	if (actual == expected1 || actual == expected2 || actual == expected3 || actual == expected4) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
        3:   37:		printf("PASS: Initial coin amount could be 2, 3, 4, or 5\n");
call    0 returned 100%
        -:   38:	}
        -:   39:	else {
    #####:   40:		printf("FAIL: Initial coin amount is not 2, 3, 4, or 5\n");
call    0 never executed
        -:   41:	}
        -:   42:	
        -:   43:	
        -:   44:	/****************************************Test 2****************************************/
        3:   45:	printf("-TEST 2-\n");
call    0 returned 100%
        -:   46:
        -:   47:	// Updated Player1
       18:   48:	for (int i = 0; i < maxHand; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:   49:		testState.hand[currentPlayer][i] = gold;
        -:   50:	}
        -:   51:
        3:   52:	expected = 15;
        3:   53:	updateCoins(currentPlayer, &testState, bonus);
call    0 returned 100%
        3:   54:	actual = testState.coins;
        3:   55:	if (actual == expected) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:   56:		printf("PASS: New coin amount is 15\n");
call    0 returned 100%
        -:   57:	}
        -:   58:	else {
    #####:   59:		printf("FAIL: New coin amount is not 15\n");
call    0 never executed
        -:   60:	}
        -:   61:	/****************************************Test 3****************************************/
        3:   62:	printf("-TEST 3-\n");
call    0 returned 100%
        -:   63:
        -:   64:	// Updated Player1
       18:   65:	for (int i = 0; i < maxHand; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:   66:		testState.hand[currentPlayer][i] = silver;
        -:   67:	}
        -:   68:	bonus + 1;
        -:   69:	
        3:   70:	expected = 11;									// silver = 2, bonus = 1; (2*5)+1 = 11 
        3:   71:	updateCoins(currentPlayer, &testState, bonus);
call    0 returned 100%
        3:   72:	actual = testState.coins;
        3:   73:	if (actual == expected) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   74:		printf("PASS: New coin amount is 11\n");
call    0 never executed
        -:   75:	}
        -:   76:	else {
        3:   77:		printf("FAIL: New coin amount is not 11\n");
call    0 returned 100%
        -:   78:	}
        3:   79:	return 0;
        -:   80:}
