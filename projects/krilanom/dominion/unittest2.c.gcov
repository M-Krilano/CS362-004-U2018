        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:
        -:    6:/*
        -:    7:Testing isGameOver()
        -:    8:*	determines if game is over depending on if province card pile is empty or
        -:    9:*	at least three card piles are empty
        -:   10:*/
        -:   11:
function main called 4 returned 100% blocks executed 86%
        4:   12:int main() {
        -:   13:	struct gameState testState;
        -:   14:	int actual;
        -:   15:	int expected;
        -:   16:
        -:   17:	// initialize supply piles to 1
      104:   18:	for (int i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      100:   19:		testState.supplyCount[i] = 1;
        -:   20:
        4:   21:	printf("TESTING: isGameOver()\n");
call    0 returned 100%
        -:   22:	/****************************************Test 1****************************************/
        4:   23:	printf("-TEST 1-\n");
call    0 returned 100%
        4:   24:	testState.supplyCount[province] = 0;
        4:   25:	expected = 1;
        4:   26:	actual = isGameOver(&testState);
call    0 returned 100%
        4:   27:	if (actual == expected)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   28:	{
        4:   29:		printf("PASSED: returned 1 because province card pile is empty\n");
call    0 returned 100%
        -:   30:	}
        -:   31:	else
        -:   32:	{
    #####:   33:		printf("FAILED: did not return 1 even thoough province card pile is empty\n");
call    0 never executed
        -:   34:	}
        -:   35:
        -:   36:	/****************************************Test 2****************************************/
        4:   37:	printf("-TEST 2-\n");
call    0 returned 100%
        4:   38:	actual = isGameOver(&testState);
call    0 returned 100%
        4:   39:	expected = 0;
        4:   40:	if (actual == expected)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   41:	{
    #####:   42:		printf("PASSED: returned 0 because no card piles are empty including the province card pile\n");
call    0 never executed
        -:   43:	}
        -:   44:	else
        -:   45:	{
        4:   46:		printf("FAILED: did not retrun 0 even though no card piles are empty including the province card pile\n");
call    0 returned 100%
        -:   47:	}
        -:   48:
        -:   49:	/****************************************Test 3****************************************/
        4:   50:	printf("-TEST 3-\n");
call    0 returned 100%
        4:   51:	testState.supplyCount[province] = 1;
        4:   52:	testState.supplyCount[minion] = 0;
        4:   53:	testState.supplyCount[duchy] = 0;
        4:   54:	testState.supplyCount[council_room] = 0;
        4:   55:	actual = isGameOver(&testState);
call    0 returned 100%
        4:   56:	expected = 1;
        4:   57:	if (actual == expected)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   58:	{
        4:   59:		printf("PASSED: returned 1 because there's 3 empty piles and stack of province cards is not empty\n");
call    0 returned 100%
        -:   60:	}
        -:   61:	else
        -:   62:	{
    #####:   63:		printf("FAILED: did not return 1 even though there's 3 empty pilies and stack of province cards is not empty\n");
call    0 never executed
        -:   64:	}
        -:   65:
        4:   66:	return 0;
        -:   67:}
