        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:
        -:    7:/*
        -:    8:*Testing Council Room Card
        -:    9:*	each other player draws a card. Player draws 4 cards and gets one buy
        -:   10:*/
        -:   11:
function assertTest called 4 returned 100% blocks executed 75%
        4:   12:void assertTest(int passedTest)
        -:   13:{
        4:   14:	if (passedTest)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   15:	{
        4:   16:		printf("PASSED: ");
call    0 returned 100%
        -:   17:	}
        -:   18:	else
        -:   19:	{
    #####:   20:		printf("FAILED: ");
call    0 never executed
        -:   21:	}
        -:   22:
        4:   23:}
        -:   24:
function main called 2 returned 100% blocks executed 100%
        2:   25:int main() {
        2:   26:	int newCards = 0;
        2:   27:	int discarded = 1;
        2:   28:	int shuffledCards = 0;
        -:   29:
        2:   30:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        2:   31:	int seed = 1000;
        2:   32:	int numPlayers = 2;
        2:   33:	int thisPlayer = 0;
        -:   34:	struct gameState originalState, testState;
        2:   35:	int k[10] = { adventurer, embargo, village, minion, mine, cutpurse,
        -:   36:		sea_hag, tribute, smithy, council_room };
        -:   37:
        -:   38:	// initialize a game state
        2:   39:	initializeGame(numPlayers, k, seed, &originalState);
call    0 returned 100%
        2:   40:	printf("\nTESTING: Council Room Card\n");
call    0 returned 100%
        -:   41:
        -:   42:	//copy game state
        2:   43:	memcpy(&testState, &originalState, sizeof(struct gameState));
        -:   44:
        2:   45:	cardEffect(council_room, choice1, choice2, choice3, &testState, handpos, &bonus);
call    0 returned 100%
        2:   46:	newCards = 4;
        -:   47:
        -:   48:	/****************************************Test 1****************************************/
        2:   49:	assertTest(testState.handCount[thisPlayer] == originalState.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        2:   50:	printf("Receives 4 cards");
call    0 returned 100%
        -:   51:	/****************************************Test 1****************************************/
        2:   52:	assertTest(testState.deckCount[thisPlayer] == originalState.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        2:   53:	printf("Deck has 4 less Cards");
call    0 returned 100%
        -:   54:	
        -:   55:
        2:   56:	return 0;
        -:   57:}
        -:   58:
