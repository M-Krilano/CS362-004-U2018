        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:
        -:    6:/*
        -:    7:*Testing supplyCount()
        -:    8:*	How many of given card are left in supply
        -:    9:*/
        -:   10://this is the amount of a specific type of card given a specific number
        -:   11:
function main called 3 returned 100% blocks executed 89%
        3:   12:int main() {
        -:   13:	struct gameState testState;
        -:   14:	int actual;
        -:   15:	int expected;
        -:   16:
        -:   17:	// initialize supply piles to 1
       78:   18:	for (int i = 0; i < 25; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       75:   19:		testState.supplyCount[i] = 1;
        -:   20:	}
        -:   21:
        3:   22:	printf("TESTING: isGameOver()\n");
call    0 returned 100%
        -:   23:	/****************************************Test 1****************************************/
        3:   24:	printf("-TEST 1-\n");
call    0 returned 100%
        3:   25:	expected = 1;
        3:   26:	actual = supplyCount(adventurer, &testState);
call    0 returned 100%
        3:   27:	if (actual == expected)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   28:	{
        3:   29:		printf("PASSED: returned 1 because adventurer card pile was set to 1\n");
call    0 returned 100%
        -:   30:	}
        -:   31:	else
        -:   32:	{
    #####:   33:		printf("FAILED: did not return 1, even thoough adventurer card pile was set to 1\n");
call    0 never executed
        -:   34:	}
        -:   35:
        -:   36:	/****************************************Test 2****************************************/
        3:   37:	printf("-TEST 2-\n");
call    0 returned 100%
        -:   38:	// initialize supply piles to 5
       78:   39:	for (int i = 0; i < 25; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       75:   40:		testState.supplyCount[i] = 5;
        -:   41:	}
        3:   42:	testState.supplyCount[sea_hag] - 5;
        3:   43:	expected = 0;
        3:   44:	actual = supplyCount(sea_hag, &testState);
call    0 returned 100%
        3:   45:	if (actual == expected)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   46:	{
        3:   47:		printf("PASSED: returned 0 because sea_hag card pile was set to 0\n");
call    0 returned 100%
        -:   48:	}
        -:   49:	else
        -:   50:	{
    #####:   51:		printf("FAILED: did not return 0, even thoough sea_hag card pile was set to 0\n");
call    0 never executed
        -:   52:	}
        -:   53:	/****************************************Test 3****************************************/
        3:   54:	printf("-TEST 3-\n");
call    0 returned 100%
       78:   55:	for (int i = 0; i < 25; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       75:   56:		testState.supplyCount[i] = -1;
        -:   57:	}
        3:   58:	expected = -1;
        3:   59:	actual = supplyCount(ambassador, &testState);
call    0 returned 100%
        3:   60:	if (actual == expected)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   61:	{
        3:   62:		printf("PASSED: returned -1 because ambassador card pile was set to -1\n");
call    0 returned 100%
        -:   63:	}
        -:   64:	else
        -:   65:	{
    #####:   66:		printf("FAILED: did not return -1, even thoough ambassador card pile was set to -1\n");
call    0 never executed
        -:   67:	}
        -:   68:	/****************************************Test 4****************************************/
        3:   69:	printf("-TEST 4-\n");
call    0 returned 100%
       78:   70:	for (int i = 0; i < 25; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       75:   71:		testState.supplyCount[i] = -10;
        -:   72:	}
        3:   73:	testState.supplyCount[minion] + 110;
        3:   74:	expected = 100;
        3:   75:	actual = supplyCount(minion, &testState);
call    0 returned 100%
        3:   76:	if (actual == expected)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   77:	{
    #####:   78:		printf("PASSED: returned 100 because minion card pile was set to 100\n");
call    0 never executed
        -:   79:	}
        -:   80:	else
        -:   81:	{
        3:   82:		printf("FAILED: did not return 100, even thoough minion card pile was set to 100\n");
call    0 returned 100%
        -:   83:	}
        -:   84:
        3:   85:	return 0;
        -:   86:}
