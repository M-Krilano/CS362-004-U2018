        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:
        -:    6:/*
        -:    7:*Testing numHandCards()
        -:    8:*	returns how many cards current player has in hand
        -:    9:*/
        -:   10:
function main called 4 returned 100% blocks executed 85%
        4:   11:int main() {
        -:   12:	struct gameState testState;
        4:   13:	int maxHandCount = 5;
        4:   14:	int numPlayers = 2;
        4:   15:	int player1 = 0;
        4:   16:	int player2 = 1;
        -:   17:	int actual;
        -:   18:	int expected;
        -:   19:	
        -:   20:	// init both players hands to 0
        4:   21:	testState.handCount[player1] = 0;
        4:   22:	testState.handCount[player2] = 0;
        -:   23:
        -:   24:	// start with player 1
        4:   25:	testState.whoseTurn = player1;
        -:   26:
        4:   27:	printf("TESTING: numHandCards()\n");
call    0 returned 100%
        -:   28:	/****************************************Test 1****************************************/
        4:   29:	printf("-TEST 1-\n");
call    0 returned 100%
        4:   30:	expected = 0;
        4:   31:	actual = numHandCards(&testState);
call    0 returned 100%
        4:   32:	if (actual == expected)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   33:	{
        4:   34:		printf("PASSED: returned 0 because cards in player 1's hand is 0\n");
call    0 returned 100%
        -:   35:	}
        -:   36:	else
        -:   37:	{
    #####:   38:		printf("FAILED: did not return 0 even though cards in player 1's hand is 0\n");
call    0 never executed
        -:   39:	}
        -:   40:
        -:   41:	/****************************************Test 2****************************************/
        4:   42:	printf("-TEST 2-\n");
call    0 returned 100%
        -:   43:	// switch to player 2;
        4:   44:	testState.whoseTurn + 1;
        4:   45:	expected = 0;
        4:   46:	actual = numHandCards(&testState);
call    0 returned 100%
        4:   47:	if (actual == expected)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   48:	{
        4:   49:		printf("PASSED: returned 0 because cards in player 2's hand is 0\n");
call    0 returned 100%
        -:   50:	}
        -:   51:	else
        -:   52:	{
    #####:   53:		printf("FAILED: did not return 0 even though cards in player 2's hand is 0\n");
call    0 never executed
        -:   54:	}
        -:   55:
        -:   56:	/****************************************Test 3****************************************/
        4:   57:	printf("-TEST 3-\n");
call    0 returned 100%
        -:   58:	// switch to player 1;
        4:   59:	testState.whoseTurn - 1;
        4:   60:	expected = 5;
       24:   61:	for (int x = 0; x < maxHandCount; x++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       20:   62:		testState.handCount[player1]++;
        -:   63:	}
        4:   64:	actual = numHandCards(&testState);
call    0 returned 100%
        4:   65:	if (actual == expected)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   66:	{
        4:   67:		printf("PASSED: return 5 because cards in player 1's hand is 5\n");
call    0 returned 100%
        -:   68:	}
        -:   69:	else
        -:   70:	{
    #####:   71:		printf("FAILED: did not return 5 even though cards in player 1's hand is 5\n");
call    0 never executed
        -:   72:	}
        -:   73:
        -:   74:	/****************************************Test 4****************************************/
        4:   75:	printf("-TEST 4-\n");
call    0 returned 100%
        -:   76:	// switch to player 2;
        4:   77:	testState.whoseTurn + 1;
        4:   78:	expected = 5;
       24:   79:	for (int x = 0; x < maxHandCount; x++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       20:   80:		testState.handCount[player2]++;
        -:   81:	}
        4:   82:	actual = numHandCards(&testState);
call    0 returned 100%
        4:   83:	if (actual == expected)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   84:	{
        4:   85:		printf("PASSED: return 5 because cards in player 2's hand is 5\n");
call    0 returned 100%
        -:   86:	}
        -:   87:	else
        -:   88:	{
    #####:   89:		printf("FAILED: did not return 5 even though cards in player 2's hand is 5\n");
call    0 never executed
        -:   90:	}
        -:   91:	
        -:   92:	/****************************************Test 5****************************************/
        4:   93:	printf("-TEST 5-\n");
call    0 returned 100%
        -:   94:	// switch to player 1;
        4:   95:	testState.whoseTurn - 1;
        4:   96:	expected = 3;
        4:   97:	testState.handCount[player1] - 2;
        4:   98:	actual = numHandCards(&testState);
call    0 returned 100%
        4:   99:	if (actual == expected)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  100:	{
    #####:  101:		printf("PASSED: returned 3 because cards in player 1's hand is 3\n");
call    0 never executed
        -:  102:	}
        -:  103:	else
        -:  104:	{
        4:  105:		printf("FAILED: did not return 3 even though cards in player 1's hand is 3\n");
call    0 returned 100%
        -:  106:	}
        -:  107:
        -:  108:	/****************************************Test 6****************************************/
        4:  109:	printf("-TEST 6-\n");
call    0 returned 100%
        -:  110:	// switch to player 2;
        4:  111:	testState.whoseTurn + 1;
        4:  112:	expected = 3;
        4:  113:	testState.handCount[player2] - 2;
        4:  114:	actual = numHandCards(&testState);
call    0 returned 100%
        4:  115:	if (actual == expected)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  116:	{
    #####:  117:		printf("PASSED: returned 3 because cards in player 2's hand is 3\n");
call    0 never executed
        -:  118:	}
        -:  119:	else
        -:  120:	{
        4:  121:		printf("FAILED: did not return 3 even though cards in player 2's hand is 3\n");
call    0 returned 100%
        -:  122:	}
        4:  123:	return 0;
        -:  124:}
